@page "/Game/{GameId}/{CreatorGuid?}"
@* @using System.Text.Json *@
@using BluffGame.Models

<h3>Game</h3>

<p>Game guid: @GameId, status @game.Status, is_creator: @_isCreator</p>

@if (_isCreator)
{
    <p><button @onclick="DeleteGame">Delete game</button></p>
}


@if (_exception is not null)
{
    <p>Exception happened:</p>
    <p>@_exception.ToString()</p>
}
else if (_username is null || !game.Users.ContainsKey(_username))
{
    <p><input type="text" @bind="_username" placeholder="Enter username" /></p>
    <p><button @onclick="SubmitUsername">Submit username</button></p>
}
else if (_isCreator && (game.Status == GameStatus.WaitingForCreator || game.Status == GameStatus.WaitingForPlayers))
{
    <p>Joined @game.Users.Count (@(string.Join(", ", game.Users.Keys)))</p>
    <p>Waiting for others to join</p>
    <button @onclick="StartGame">Start game</button>
    <p><a href="/Game/@GameId">Link to game: /Game/@GameId</a></p>
}
else if (game.Status == GameStatus.WaitingForPlayers)
{
    <p>Joined @game.Users.Count (@(string.Join(", ", game.Users.Keys)))</p>
    <p>Waiting for others to join</p>
    <p><a href="/Game/@GameId">Link to game: /Game/@GameId</a></p>
}
else if (game.Status == GameStatus.Playing)
{
    <p>Playing round @game.Rounds.Count</p>
    
    @if (game.Rounds.Count > 1)
    {
        <ul>
            <li>
                Your guess rate: @game.GetUserGuessRate(_username);
            </li>
            <li>
                @game.WhosValueAmIGuessing(_username)'s guess rate: @game.GetUserGuessRate(game.WhosValueAmIGuessing(_username)!);
            </li>
            <li>
                Your lie rate: @game.GetUserLieRate(_username);
            </li>
            <li>
                @game.WhosValueAmIGuessing(_username)'s lie rate: @game.GetUserLieRate(game.WhosValueAmIGuessing(_username)!);
            </li>
        </ul>
    }
    
    @if (game.TryFindDidIWinInPreviousRound(_username, out var win))
    {
        <p>I won in prev round: @(win)</p>
    }
    
    <p>Some information</p>
    
    @if (game.HaveIWished(_username) && game.HaveIAnswered(_username))
    {
        <p>You voted. Waiting for others to vote.</p>
    }
    else
    {
        
        if (!game.HaveIAnswered(_username))
        {
            <p>You are guessing a number asked by @game.WhosValueAmIGuessing(_username)</p>
            @if (game.TryGetMyHint(_username, out var hint))
            {
                <p>You even have a hint: the hint is @(hint)</p>
            }
            <p>
                <input type="checkbox" @bind="_myAnswer" id="checkboxMyAnswer" />
                <label for="checkboxMyAnswer">I think, they wished for a True</label>
                <button @onclick="Answer">Submit</button> @* todo here *@
            </p>
        }
        
        if (!game.HaveIWished(_username))
        {
            
            <p>You are guessing a number for @game.WhoAmIGuessingFor(_username)</p>
            <p>
                <ul>
                    <li>
                        <input type="checkbox" @bind="_myWish" id="checkboxMyWish" />
                        <label for="checkboxMyWish">I wish a True</label>
                    </li>
                    <li>
                        <input type="checkbox" @bind="_myWishShowHint" id="checkboxWannaHint" />
                        <label for="checkboxWannaHint">I will make a hint</label>
                    </li>
                    @if (_myWishShowHint)
                    {
                        <li>
                            <input type="checkbox" @bind="_myWishHint" id="checkboxMyHint" />
                            <label for="checkboxMyHint">My hint is True</label>
                        </li>
                    }
                    <button @onclick="Guess">Submit</button> @* todo here *@
                </ul>
            </p>
        }

    }
}
else
{
    <p>Some error happened</p>
}
            

@* <pre> *@
@*     @(JsonSerializer.Serialize(game, new JsonSerializerOptions() { WriteIndented = true })) *@
@* </pre> *@

<br />
<br />
<p>HashCode: @GetHashCode()</p>


@code {
    [Parameter]
    public string GameId { get; init; }
    [Parameter]
    public string? CreatorGuid { get; init; }

    private Game game;

    private string? _username = null;
    private bool _isCreator = false;

    private Exception? _exception = null;

    private bool _myAnswer = false;
    private bool _myWish = false;
    private bool _myWishShowHint = true;
    private bool _myWishHint = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!Game.Games.TryGetValue(GameId, out game!))
        {
            _exception = new Exception("The game does not exist.");
            return;
        }

        if (game.Status == GameStatus.WaitingForCreator)
        {
            if (CreatorGuid is null || game.CreatorGuid.ToString() != CreatorGuid)
            {
                _exception = new Exception("Seems like you are not the creator, you cannot join the game right now.");
                return;
            }

            _isCreator = true;
        }
        else if (game.Status == GameStatus.WaitingForPlayers)
        {
            // Empty?
        }
        else
        {
            _exception = new Exception($"Game is in bad status: {game.Status}");
            return;
        }
    }

    private void SubmitUsername()
    {
        if (string.IsNullOrEmpty(_username)) return;

        if (game.Users.ContainsKey(_username))
        {
            _exception = new Exception("Username is already taken.");
            return;
        }

        game.Users[_username] = this;

        if (_isCreator)
        {
            game.Status = GameStatus.WaitingForPlayers;
        }
        
        UpdateAllPages();
    }

    private void StartGame()
    {
        if (!_isCreator)
        {
            _exception = new Exception("You cannot run game");
            return;
        }

        game.NewRound();
        game.Status = GameStatus.Playing;
        UpdateAllPages();
    }

    private Task UpdateAllPages()
    {
        var tasks = game.Users.Values.Select(x => x.InvokeAsync(x.StateHasChanged));
        return Task.WhenAll(tasks);
    }

    private void DeleteGame()
    {
        if (!_isCreator)
        {
            _exception = new Exception("You cannot run game");
            return;
        }

        Game.Games.Remove(GameId);
        UpdateAllPages();
    }

    private void Answer()
    {
        game.AnswerValue(_username!, _myAnswer);
        _myAnswer = false;
        MakeNewRoundIfNeeded();
    }
    private void Guess()
    {
        bool? hint = _myWishShowHint ? _myWishHint : null;
        game.WishValue(_username!, _myWish, hint);
        _myWish = false;
        _myWishHint = false;
        _myWishShowHint = true;
        MakeNewRoundIfNeeded();
    }

    private void MakeNewRoundIfNeeded()
    {
        if (!WeNeedNewRound()) return;

        game.NewRound();
        UpdateAllPages();
    }

    private bool WeNeedNewRound()
    {
        if (!game.Rounds.Any()) throw new Exception("Unreachable exception: no rounds");

        if (game.Rounds.Count == 1)
        {
            return game.Rounds.Last().AllWished;
        }

        return game.Rounds.Last().AllWished && game.Rounds[^2].AllAnswered;
    }

}
